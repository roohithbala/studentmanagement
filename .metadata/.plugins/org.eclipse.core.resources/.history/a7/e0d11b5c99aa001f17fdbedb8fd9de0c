// Define the API base URL
const apiBaseUrl = 'http://localhost:8080/api/students';

// Function to add a new student
async function addStudent(studentData) {
    try {
        const response = await fetch(apiBaseUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(studentData),
        });

        if (response.ok) {
            const student = await response.json();
            alert('Student added successfully!');
            console.log(student);
        } else {
            const error = await response.json();
            alert(`Failed to add student: ${error.message}`);
        }
    } catch (error) {
        alert('An error occurred while adding the student.');
        console.error(error);
    }
}

// Function to get all students
async function getAllStudents() {
    try {
        const response = await fetch(apiBaseUrl);
        if (response.ok) {
            const students = await response.json();
            displayStudents(students);
        } else {
            alert('Failed to fetch students.');
        }
    } catch (error) {
        alert('An error occurred while fetching the students.');
        console.error(error);
    }
}

// Function to get a student by roll number
async function getStudentByRollNumber(rollNumber) {
    try {
        const response = await fetch(`${apiBaseUrl}/${rollNumber}`);
        if (response.ok) {
            const student = await response.json();
            return student;
        } else if (response.status === 404) {
            alert('Student not found.');
        }
    } catch (error) {
        alert('An error occurred while fetching the student.');
        console.error(error);
    }
}

// Function to update student details
async function updateStudent(id, updatedStudentData) {
    try {
        const response = await fetch(`${apiBaseUrl}/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedStudentData),
        });

        if (response.ok) {
            const student = await response.json();
            alert('Student updated successfully!');
            console.log(student);
        } else {
            alert('Failed to update student.');
        }
    } catch (error) {
        alert('An error occurred while updating the student.');
        console.error(error);
    }
}

// Function to delete a student by ID
async function deleteStudent(id) {
    try {
        const response = await fetch(`${apiBaseUrl}/${id}`, {
            method: 'DELETE',
        });

        if (response.ok) {
            alert('Student deleted successfully!');
        } else if (response.status === 404) {
            alert('Student not found.');
        }
    } catch (error) {
        alert('An error occurred while deleting the student.');
        console.error(error);
    }
}

// Function to display students in the table
function displayStudents(students) {
    const studentsTableBody = document.getElementById('students-table').getElementsByTagName('tbody')[0];
    studentsTableBody.innerHTML = ''; // Clear existing table rows

    students.forEach(student => {
        const row = studentsTableBody.insertRow();

        const rollNumberCell = row.insertCell(0);
        rollNumberCell.textContent = student.rollNumber;

        const nameCell = row.insertCell(1);
        nameCell.textContent = student.name;

        const emailCell = row.insertCell(2);
        emailCell.textContent = student.email;

        const departmentCell = row.insertCell(3);
        departmentCell.textContent = student.department;

        // Add edit and delete buttons
        const actionsCell = row.insertCell(4);
        actionsCell.innerHTML = `
            <button onclick="editStudent('${student.id}')">Edit</button>
            <button onclick="removeStudent('${student.id}')">Delete</button>
        `;
    });
}

// Function to edit student data (for use in a modal or form)
async function editStudent(id) {
    const student = await getStudentByRollNumber(id);

    if (student) {
        document.getElementById('rollNumber').value = student.rollNumber;
        document.getElementById('name').value = student.name;
        document.getElementById('email').value = student.email;
        document.getElementById('department').value = student.department;

        // Update the form action to handle updates
        const addButton = document.querySelector('button[type="submit"]');
        addButton.textContent = 'Update Student';
        addButton.onclick = function() {
            const updatedStudentData = {
                rollNumber: document.getElementById('rollNumber').value,
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                department: document.getElementById('department').value
            };

            updateStudent(id, updatedStudentData);
        };
    }
}

// Function to remove a student
function removeStudent(id) {
    const confirmDelete = confirm('Are you sure you want to delete this student?');
    if (confirmDelete) {
        deleteStudent(id);
    }
}

// Event listener to handle form submission
document.getElementById('add-student-form').addEventListener('submit', function(event) {
    event.preventDefault();

    const studentData = {
        rollNumber: document.getElementById('rollNumber').value,
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        department: document.getElementById('department').value
    };

    const submitButton = document.querySelector('button[type="submit"]');
    if (submitButton.textContent === 'Add Student') {
        addStudent(studentData);
    }

    // Clear the form after submission
    document.getElementById('add-student-form').reset();
});

// Fetch and display all students when the page loads
window.onload = function() {
    getAllStudents();
};
